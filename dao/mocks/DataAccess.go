// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/anmolbabu/contact-book/models"

// DataAccess is an autogenerated mock type for the DataAccess type
type DataAccess struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *DataAccess) Add(_a0 models.Contact) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Contact) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cleanup provides a mock function with given fields:
func (_m *DataAccess) Cleanup() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: emailId
func (_m *DataAccess) Delete(emailId string) error {
	ret := _m.Called(emailId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(emailId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: emailId
func (_m *DataAccess) Get(emailId string) (models.Contact, error) {
	ret := _m.Called(emailId)

	var r0 models.Contact
	if rf, ok := ret.Get(0).(func(string) models.Contact); ok {
		r0 = rf(emailId)
	} else {
		r0 = ret.Get(0).(models.Contact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(emailId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: searchContact, pageNo, pageLimit
func (_m *DataAccess) GetAll(searchContact *models.Contact, pageNo int, pageLimit int) ([]models.Contact, error) {
	ret := _m.Called(searchContact, pageNo, pageLimit)

	var r0 []models.Contact
	if rf, ok := ret.Get(0).(func(*models.Contact, int, int) []models.Contact); ok {
		r0 = rf(searchContact, pageNo, pageLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Contact, int, int) error); ok {
		r1 = rf(searchContact, pageNo, pageLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemKey provides a mock function with given fields: emailID
func (_m *DataAccess) GetItemKey(emailID string) ([]byte, error) {
	ret := _m.Called(emailID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(emailID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(emailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *DataAccess) Update(_a0 string, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
